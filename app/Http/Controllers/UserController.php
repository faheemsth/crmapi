<?php

namespace App\Http\Controllers;

use Auth;
use File;
use Session;
use App\Models\NOC;
use App\Models\Plan;
use App\Models\User;
use App\Models\Order;
use App\Models\Branch;
use App\Models\Region;
use App\Models\Utility;
use App\Models\Employee;
use App\Models\UserToDo;
use App\Models\CustomField;
use App\Models\SavedFilter;
use App\Models\UserCompany;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models\JoiningLetter;
use App\Models\CompanyPermission;
use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Role;
use App\Mail\AutoGeneratedPassword;
use App\Models\AdditionalAddress;
use App\Models\GenerateOfferLetter;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use App\Models\ExperienceCertificate;
use App\Models\Notification;
use App\Models\DealTask;
use App\Models\Deal;
use App\Models\Lead;
use App\Models\DealApplication;
use App\Models\EmergencyContact;
use App\Models\EmployeeDocument;
use App\Models\EmployeeMeta;
use App\Models\InternalEmployeeNotes;
use Illuminate\Support\Facades\Validator;

class UserController extends Controller
{

    public function Pluck_All_Users(Request $request)
    {
        $user = \Auth::user();
        if (\Auth::user()->can('manage employee')) {
            $excludedTypes = ['super admin', 'company', 'team', 'client'];
            $usersQuery = User::select(['users.id', 'users.name'])->whereNotIn('type', $excludedTypes);

            if ($user->type == 'super admin') {
                // No need to redeclare the query, we just need to exclude types here
                $usersQuery->whereNotIn('type', $excludedTypes);
            } else if ($user->type == 'company') {
                $usersQuery->where('brand_id', $user->id);
            } else {
                $usersQuery->where('brand_id', $user->brand_id);
            }

            $users = $usersQuery->pluck('name', 'id');

            return response()->json([
                'status' => 'success',
                'data' => $users
            ], 200);
        } else {
            return response()->json([
                'status' => 'error',
                'message' => __('Permission denied.')
            ], 403);
        }
    }
    public function employees(Request $request)
    {
        $user = \Auth::user();

        // Ensure the user has permission to manage employees
        if (\Auth::user()->can('manage employee')) {
            $excludedTypes = ['company', 'team', 'client'];
            $usersQuery = User::select('users.*');

            // Get company filters
            $companies = FiltersBrands();
            $brand_ids = array_keys($companies);

            // Apply permissions based on user levels and attributes
            if (\Auth::user()->can('level 1')) {
                // Permissions for level 1
            } elseif (\Auth::user()->type == 'company') {
                $usersQuery->where('brand_id', \Auth::user()->id);
            } elseif (\Auth::user()->can('level 2')) {
                $usersQuery->whereIn('brand_id', $brand_ids);
            } elseif (\Auth::user()->can('level 3') && !empty(\Auth::user()->region_id)) {
                $usersQuery->where('region_id', \Auth::user()->region_id);
            } elseif (\Auth::user()->can('level 4') && !empty(\Auth::user()->branch_id)) {
                $usersQuery->where('branch_id', \Auth::user()->branch_id);
            } else {
                $usersQuery->where('id', \Auth::user()->id);
            }

            // Apply exclusion of user types
            $usersQuery->whereNotIn('type', $excludedTypes);

            // Fetch user data (e.g., 'name' and 'id')
            $users = $usersQuery->orderBy('users.name', 'ASC')->get(['name', 'id']);

            // Return response with status and data
            return response()->json([
                'status' => 'success',
                'data' => $users
            ]);
        }

        // Return an error if the user doesn't have permission
        return response()->json([
            'status' => 'error',
            'message' => 'Unauthorized'
        ], 403);
    }



    public function getProfileData(Request $request)
    {
        // Validate emp_id
        $validator = Validator::make($request->all(), [
            'emp_id' => 'nullable|integer|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'errors' => $validator->errors(),
            ], 422);
        }

        $userId = $request->input('emp_id', \Auth::id());
        $authUser = User::findOrFail($userId);

        if (!\Auth::user()->can('edit employee') && \Auth::id() !== (int) $userId) {
            return response()->json([
                'status' => 'error',
                'message' => 'Permission Denied.',
            ], 403);
        }

        $user = $authUser;
        $employee = Employee::where('user_id', $user->id)->first();

        $filters = BrandsRegionsBranchesForEdit($user->brand_id, $user->region_id, $user->branch_id);
        $companies = $filters['brands'];
        $regions = $filters['regions'];
        $branches = $filters['branches'];
        $employees = $filters['employees'];

        $excludedTypes = ['super admin', 'company', 'team', 'client'];
        $roles = Role::whereNotIn('name', $excludedTypes)->get()->unique('name')->pluck('name', 'id');

        $customFields = CustomField::where('created_by', $authUser->creatorId())
            ->where('module', 'user')
            ->get();

        return response()->json([
            'status' => 'success',
            'data' => [
                'user' => $user,
                'employee' => $employee,
                'roles' => $roles,
                'customFields' => $customFields,
                'companies' => $companies,
                'regions' => $regions,
                'branches' => $branches,
                'employees' => $employees,
            ]
        ], 200);
    }


    public function getEmployees(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'page' => 'nullable|integer|min:1',
            'perPage' => 'nullable|integer|min:1',
            'brand' => 'nullable|integer|exists:users,id',
            'region_id' => 'nullable|integer|exists:regions,id',
            'branch_id' => 'nullable|integer|exists:branches,id',
            'name' => 'nullable|string',
            'Designation' => 'nullable|string',
            'phone' => 'nullable|string',
            'search' => 'nullable|string',
            'download_csv' => 'nullable|boolean', // Add this parameter
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'errors' => $validator->errors()
            ], 422);
        }

        $user = \Auth::user();
        $perPage = $request->input('perPage', env("RESULTS_ON_PAGE", 50));
        $page = $request->input('page', 1);

        if (!$user->can('manage employee')) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized access'
            ], 403);
        }

        $excludedTypes = ['company', 'team', 'client'];

        $employeesQuery = User::with(['branch', 'brand'])->select('users.*')
            ->whereNotIn('type', $excludedTypes);

        // Apply filters
        if ($request->filled('brand')) {
            $employeesQuery->where('brand_id', $request->brand);
        }
        if ($request->filled('region_id')) {
            $employeesQuery->where('region_id', $request->region_id);
        }
        if ($request->filled('branch_id')) {
            $employeesQuery->where('branch_id', $request->branch_id);
        }
        if ($request->filled('name')) {
            $employeesQuery->where('name', 'like', '%' . $request->name . '%');
        }
        if ($request->filled('Designation')) {
            $employeesQuery->where('type', 'like', '%' . $request->Designation . '%');
        }
        if ($request->filled('phone')) {
            $employeesQuery->where('phone', 'like', '%' . $request->phone . '%');
        }
        if ($request->filled('search')) {
            $search = $request->search;
            $employeesQuery->where(function ($query) use ($search) {
                $query->where('users.name', 'like', "%$search%")
                    ->orWhere('users.email', 'like', "%$search%")
                    ->orWhere('users.phone', 'like', "%$search%")
                    ->orWhere('users.type', 'like', "%$search%")
                    ->orWhere(DB::raw('(SELECT name FROM branches WHERE branches.id = users.branch_id)'), 'like', "%$search%")
                    ->orWhere(DB::raw('(SELECT name FROM regions WHERE regions.id = users.region_id)'), 'like', "%$search%")
                    ->orWhere(DB::raw('(SELECT name FROM users AS brands WHERE brands.id = users.brand_id)'), 'like', "%$search%");
            });
        }

        // Apply user-specific restrictions
        if ($user->can('level 1') || $user->type === 'super admin') {
            // Level 1 permissions
        } elseif ($user->type === 'company') {
            $employeesQuery->where('brand_id', $user->id);
        } elseif ($user->can('level 2')) {
            $brandIds = array_keys(FiltersBrands());
            $employeesQuery->whereIn('brand_id', $brandIds);
        } elseif ($user->can('level 3') && $user->region_id) {
            $employeesQuery->where('region_id', $user->region_id);
        } elseif ($user->can('level 4') && $user->branch_id) {
            $employeesQuery->where('branch_id', $user->branch_id);
        } else {
            $employeesQuery->where('id', $user->id);
        }
        //  dd($request->input('download_csv'));
        // Check if CSV download is requested
        if ($request->input('download_csv')) {
            $employees = $employeesQuery->get(); // Fetch all records without pagination



            // Generate CSV
            $csvFileName = 'employees_' . time() . '.csv';
            $headers = [
                'Content-Type' => 'text/csv',
                'Content-Disposition' => 'attachment; filename="' . $csvFileName . '"',
            ];

            $callback = function () use ($employees) {
                $file = fopen('php://output', 'w');

                // Add CSV headers
                fputcsv($file, [
                    'ID',
                    'Name',
                    'Email',
                    'Phone',
                    'Brand',
                    'Branch',
                    'Designation',
                    'Status',
                    'Last Login'
                ]);

                // Add rows
                foreach ($employees as $employee) {
                    fputcsv($file, [
                        $employee->id,
                        $employee->name,
                        $employee->email,
                        $employee->phone,
                        $employee->brand->name ?? '',
                        $employee->branch->name ?? '',
                        $employee->type,
                        $employee->is_active == 1 ? 'Active' : 'Inactive',
                        $employee->last_login_at,
                    ]);
                }

                fclose($file);
            };

            return response()->stream($callback, 200, $headers);
        }

        // Paginate results
        $employees = $employeesQuery
            ->orderBy('users.name', 'ASC')
            ->paginate($perPage, ['*'], 'page', $page);

        return response()->json([
            'status' => 'success',
            'data' => $employees->items(),
            'current_page' => $employees->currentPage(),
            'last_page' => $employees->lastPage(),
            'total_records' => $employees->total(),
            'perPage' => $employees->perPage()
        ], 200);
    }

    public function getEmployees_download(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'page' => 'nullable|integer|min:1',
            'perPage' => 'nullable|integer|min:1',
            'brand' => 'nullable|integer|exists:users,id',
            'region_id' => 'nullable|integer|exists:regions,id',
            'branch_id' => 'nullable|integer|exists:branches,id',
            'Name' => 'nullable|string',
            'Designation' => 'nullable|string',
            'phone' => 'nullable|string',
            'search' => 'nullable|string',
            'download_csv' => 'nullable|boolean', // Add this parameter
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'errors' => $validator->errors()
            ], 422);
        }

        $user = \Auth::user();
        $perPage = $request->input('perPage', env("RESULTS_ON_PAGE", 50));
        $page = $request->input('page', 1);

        if (!$user->can('manage employee')) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized access'
            ], 403);
        }

        $excludedTypes = ['super admin', 'company', 'team', 'client'];

        $employeesQuery = User::select('users.*')
            ->whereNotIn('type', $excludedTypes);

        // Apply filters (same as before)
        if ($request->filled('brand')) {
            $employeesQuery->where('brand_id', $request->brand);
        }
        if ($request->filled('region_id')) {
            $employeesQuery->where('region_id', $request->region_id);
        }
        if ($request->filled('branch_id')) {
            $employeesQuery->where('branch_id', $request->branch_id);
        }
        if ($request->filled('Name')) {
            $employeesQuery->where('name', 'like', '%' . $request->Name . '%');
        }
        if ($request->filled('Designation')) {
            $employeesQuery->where('type', 'like', '%' . $request->Designation . '%');
        }
        if ($request->filled('phone')) {
            $employeesQuery->where('phone', 'like', '%' . $request->phone . '%');
        }
        if ($request->filled('search')) {
            $search = $request->search;
            $employeesQuery->where(function ($query) use ($search) {
                $query->where('users.name', 'like', "%$search%")
                    ->orWhere('users.email', 'like', "%$search%")
                    ->orWhere('users.phone', 'like', "%$search%")
                    ->orWhere('users.type', 'like', "%$search%")
                    ->orWhere(DB::raw('(SELECT name FROM branches WHERE branches.id = users.branch_id)'), 'like', "%$search%")
                    ->orWhere(DB::raw('(SELECT name FROM regions WHERE regions.id = users.region_id)'), 'like', "%$search%")
                    ->orWhere(DB::raw('(SELECT name FROM users AS brands WHERE brands.id = users.brand_id)'), 'like', "%$search%");
            });
        }

        // Apply user-specific restrictions (same as before)
        if ($user->can('level 1') || $user->type === 'super admin') {
            // Level 1 permissions
        } elseif ($user->type === 'company') {
            $employeesQuery->where('brand_id', $user->id);
        } elseif ($user->can('level 2')) {
            $brandIds = array_keys(FiltersBrands());
            $employeesQuery->whereIn('brand_id', $brandIds);
        } elseif ($user->can('level 3') && $user->region_id) {
            $employeesQuery->where('region_id', $user->region_id);
        } elseif ($user->can('level 4') && $user->branch_id) {
            $employeesQuery->where('branch_id', $user->branch_id);
        } else {
            $employeesQuery->where('id', $user->id);
        }

        // Check if CSV download is requested
        if ($request->input('download_csv')) {
            $employees = $employeesQuery->get(); // Fetch all records without pagination

            // Generate CSV
            $csvFileName = 'employees_' . time() . '.csv';
            $headers = [
                'Content-Type' => 'text/csv',
                'Content-Disposition' => 'attachment; filename="' . $csvFileName . '"',
            ];

            $callback = function () use ($employees) {
                $file = fopen('php://output', 'w');

                // Add CSV headers
                fputcsv($file, [
                    'ID',
                    'Name',
                    'Email',
                    'Phone',
                    'Brand',
                    'Branch',
                    'Designation',
                    'Status',
                    'Last Login'
                ]);

                // Add rows
                foreach ($employees as $employee) {
                    fputcsv($file, [
                        $employee->id,
                        $employee->name,
                        $employee->email,
                        $employee->phone,
                        $employee->brand->name ?? '',
                        $employee->branch->name ?? '',
                        $employee->type,
                        $employee->is_active == 1 ? 'Active' : 'Inactive',
                        $employee->last_login_at,
                    ]);
                }

                fclose($file);
            };

            return response()->stream($callback, 200, $headers);
        }

        // Paginate results (if CSV download is not requested)
        $employees = $employeesQuery
            ->orderBy('users.name', 'ASC')
            ->paginate($perPage, ['*'], 'page', $page);

        return response()->json([
            'status' => 'success',
            'data' => $employees->items(),
            'current_page' => $employees->currentPage(),
            'last_page' => $employees->lastPage(),
            'total_records' => $employees->total(),
            'perPage' => $employees->perPage()
        ], 200);
    }
    public function updateUserStatus(Request $request)
    {
        // Check if the user has permission to edit users
        if (!\Auth::user()->can('edit user')) {
            return response()->json([
                'status' => 'error',
                'message' => 'Permission denied.',
            ], 403);
        }

        $validator = Validator::make($request->all(), [
            'id' => 'required|integer|exists:users,id',
            'is_active' => 'required|in:0,1',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => $validator->errors(),
            ], 422);
        }

        $user = User::find($request->id);

        if (!$user) {
            return response()->json([
                'status' => 'error',
                'message' => 'User not found.',
            ], 404);
        }

        // Update user status
        $user->is_active = $request->is_active;
        $user->save();

        return response()->json([
            'status' => 'success',
            'message' => 'User status successfully updated.',
            'data' => $user,
        ], 200);
    }

    public function EmployeeDetails(Request $request)
    {


        $EmployeeDetails = User::with('employee')->select(
            'users.*',
            'assignedUser.name as brand_name',
            'regions.name as region_name',
            'branches.name as branch_name'
        )
            ->leftJoin('users as assignedUser', 'assignedUser.id', '=', 'users.brand_id')
            ->leftJoin('regions', 'regions.id', '=', 'users.region_id')
            ->leftJoin('branches', 'branches.id', '=', 'users.branch_id')
            ->where('users.id', $request->id)
            ->first();

        $Employee = Employee::select('pay_slips.*', 'creater.name as created_by')
            ->leftJoin('pay_slips', 'pay_slips.employee_id', '=', 'employees.id')
            ->leftJoin('users as creater', 'creater.id', '=', 'employees.user_id') // Fixed alias reference
            ->where('employees.user_id', $request->id)
            ->get();
        $EmergencyContact = EmergencyContact::where('user_id', $request->id)->get();
        $AdditionalAddress = AdditionalAddress::where('user_id', $request->id)->get();

        $data = [
            'EmployeeDetails' => $EmployeeDetails,
            'pay_slips' => $Employee,
            'EmergencyContact' => $EmergencyContact,
            'AdditionalAddress' => $AdditionalAddress,
        ];
        return response()->json([
            'status' => 'success',
            'data' => $data,
        ], 200);
    }


    public function HrmInternalEmployeeNoteStore(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'brand_id' => 'required|integer|min:1',
            'region_id' => 'required|integer|min:1',
            'branch_id' => 'required|integer|min:1',
            'lead_assigned_user' => 'required',
            'employee_notes' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => $validator->errors()->first(),
            ], 422);
        }

        $internalEmployeeNotes = InternalEmployeeNotes::create([
            'brand_id' => $request->brand_id,
            'region_id' => $request->region_id,
            'lead_branch' => $request->branch_id,
            'lead_assigned_user' => $request->lead_assigned_user,
            'notes' => $request->employee_notes,
            'created_by' => \Auth::id(),
        ]);
        addLogActivity([
            'type' => 'success',
            'note' => json_encode([
                'title' => $internalEmployeeNotes->employee->name . ' employee notes  created',
                'message' => $internalEmployeeNotes->employee->name . 'employee notes  created'
            ]),
            'module_id' => $internalEmployeeNotes->id,
            'module_type' => 'employee_notes',
            'notification_type' => 'employee notes created',
        ]);
          addLogActivity([
            'type' => 'success',
            'note' => json_encode([
                'title' => $internalEmployeeNotes->employee->name . ' employee notes  created',
                'message' => $internalEmployeeNotes->employee->name . 'employee notes  created'
            ]),
            'module_id' => $internalEmployeeNotes->lead_assigned_user,
            'module_type' => 'employeeprofile',
            'notification_type' => 'employee notes created',
        ]);
        return response()->json([
            'status' => 'success',
            'message' => 'Internal Employee Note successfully created.',
            'data' => $internalEmployeeNotes,
        ], 201);
    }

    public function HrmInternalEmployeeNoteDelete(Request $request)
    {
        $internalEmployeeNotes = InternalEmployeeNotes::find($request->id);

        if (!$internalEmployeeNotes) {
            return response()->json([
                'status' => 'error',
                'message' => 'Record not found.',
            ], 404);
        }
        addLogActivity([
            'type' => 'warning',
            'note' => json_encode([
                'title' => $internalEmployeeNotes->employee->name . ' employee notes  deleted',
                'message' => $internalEmployeeNotes->employee->name . 'employee notes  deleted'
            ]),
            'module_id' => $internalEmployeeNotes->id,
            'module_type' => 'employee_notes',
            'notification_type' => 'employee notes deleted',
        ]);
         addLogActivity([
            'type' => 'warning',
            'note' => json_encode([
                'title' => $internalEmployeeNotes->employee->name . ' employee notes  deleted',
                'message' => $internalEmployeeNotes->employee->name . 'employee notes  deleted'
            ]),
            'module_id' => $internalEmployeeNotes->lead_assigned_user,
            'module_type' => 'employeeprofile',
            'notification_type' => 'employee notes deleted',
        ]);
        $internalEmployeeNotes->delete();

        return response()->json([
            'status' => 'success',
            'message' => 'Internal Employee Note successfully deleted.',
        ]);
    }

    public function HrmInternalEmployeeNoteUpdate(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'brand_id' => 'required|integer|min:1',
            'region_id' => 'required|integer|min:1',
            'branch_id' => 'required|integer|min:1',
            'lead_assigned_user' => 'required',
            'employee_notes' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => $validator->errors()->first(),
            ], 422);
        }

        $internalEmployeeNotes = InternalEmployeeNotes::find($request->id);

        if (!$internalEmployeeNotes) {
            return response()->json([
                'status' => 'error',
                'message' => 'Record not found.',
            ], 404);
        }
         $originalData = $internalEmployeeNotes->toArray();
        $internalEmployeeNotes->update([
            'brand_id' => $request->brand_id,
            'region_id' => $request->region_id,
            'lead_branch' => $request->branch_id,
            'lead_assigned_user' => $request->lead_assigned_user,
            'notes' => $request->employee_notes,
            'created_by' => \Auth::id(),
        ]);

        $changes = [];
         $updatedFields = [];
        foreach ($originalData as $field => $oldValue) {
             if (in_array($field, ['created_at', 'updated_at'])) {
                    continue;
                }
            if ($internalEmployeeNotes->$field != $oldValue) {
                $changes[$field] = [
                    'old' => $oldValue,
                    'new' => $internalEmployeeNotes->$field
                ];
                $updatedFields[] = $field;
            }
        }

        addLogActivity([
            'type' => 'info',
            'note' => json_encode([
                'title' => $internalEmployeeNotes->employee->name . ' employee notes  updated',
               'message' => 'Fields updated: ' . implode(', ', $updatedFields)
            ]),
            'module_id' => $internalEmployeeNotes->id,
            'module_type' => 'employee_notes',
            'notification_type' => 'employee notes updated',
        ]);
        addLogActivity([
                    'type' => 'info',
                    'note' => json_encode([
                        'title' => $internalEmployeeNotes->employee->name . ' employee notes  updated',
                    'message' => 'Fields updated: ' . implode(', ', $updatedFields)
                    ]),
                    'module_id' => $internalEmployeeNotes->lead_assigned_user,
                    'module_type' => 'employeeprofile',
                    'notification_type' => 'employee notes updated',
                ]);

        return response()->json([
            'status' => 'success',
            'message' => 'Internal Employee Note successfully updated.',
        ]);
    }

    public function HrmInternalEmployeeNoteGet(Request $request)
    {
         
        $InternalEmployeeNotes = InternalEmployeeNotes::with('created_by')->with('lead_assigned_user')->where('lead_assigned_user', $request->id)
        ->orderBy('id', 'desc')
        ->get();

        return response()->json([
            'status' => 'success',
            'data' => $InternalEmployeeNotes,
        ]);
    }


    public function getBrands(Request $request)
    {
        $user = \Auth::user();

        $num_results_on_page = env("RESULTS_ON_PAGE", 50);

        // Pagination parameters
        $page = $request->get('page', 1);
        $num_results_on_page = $request->get('num_results_on_page', $num_results_on_page);
        $start = ($page - 1) * $num_results_on_page;

        if (\Auth::user()->can('manage user')) {

            $user_query = User::select(['users.*',  'project_director.name as project_director',  'project_manager.name as project_manager'])
                ->where('users.type', 'company')
                ->leftJoin('users as project_director', 'project_director.id', '=', 'users.project_director_id')
                ->leftJoin('users as project_manager', 'project_manager.id', '=', 'users.project_manager_id');

            if (\Auth::user()->type != 'super admin' && \Auth::user()->type != 'Admin Team' && \Auth::user()->type != 'HR') {
                $companies = FiltersBrands();
                $brand_ids = array_keys($companies);
                $user_query->whereIn('users.id', $brand_ids);
            }

            // Apply search filter if provided
            if ($request->filled('search')) {
                $g_search = $request->get('search');
                $user_query->where(function ($query) use ($g_search) {
                    $query->where('users.name', 'like', '%' . $g_search . '%')
                        ->orWhere('users.website_link', 'like', '%' . $g_search . '%')
                        ->orWhere('project_director.name', 'like', '%' . $g_search . '%');
                });
            }

            // Apply brand filter if provided
            if ($request->filled('brand')) {
                $user_query->where('users.id', $request->get('brand'));
            }

            // Apply director filter if provided
            if ($request->filled('director')) {
                $user_query->where('users.project_director_id', $request->get('director'));
            }

            $total_records = $user_query->count();
            $users = $user_query->orderBy('users.name', 'ASC')
                ->paginate($num_results_on_page);



            // Prepare API response
            return response()->json([
                'status' => 'success',

                'data' => $users->items(),
                'total_records' => $total_records,
                'current_page' => $users->currentPage(),
                'last_page' => $users->lastPage(),
                'per_page' => $users->perPage(),

            ], 200);
        } else {
            return response()->json([
                'status' => 'error',
                'message' => 'Permission Denied.'
            ], 403);
        }
    }

    public function addBrand(Request $request)
    {
        if (!Auth::user()->can('create user')) {
            return response()->json([
                'status' => 'error',
                'message' => __('Permission Denied')
            ], 403);
        }

        $default_language = DB::table('settings')
            ->where('name', 'default_language')
            ->value('value');


        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:120',
            'email' => 'required|email|unique:users,email',
            'website_link' => 'required|url',
            'drive_link' => 'required|url',
            'domain_link' => 'nullable|url',
            'project_director' => 'nullable|integer|exists:users,id',
        ]);

        $request->role =    'company';


        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            DB::beginTransaction();

            // Default Password
            $password = '1234';

            // Create User
            $user = User::create([
                'name' => $request->name,
                'email' => $request->email,
                'password' => Hash::make($password),
                'type' => $request->role,
                'default_pipeline' => 1,
                'plan' => Plan::first()->id,
                'lang' => $default_language ?? '',
                'created_by' => Auth::user()->creatorId(),
                'domain_link' => $request->domain_link,
                'website_link' => $request->website_link,
                'drive_link' => $request->drive_link,
                'project_director_id' => $request->project_director,
            ]);

            // Assign Role
            $role = Role::findByName($request->role, 'web');
            $user->assignRole($role);

            // Set Default Data
            $user->userDefaultDataRegister($user->id);
            $user->userWarehouseRegister($user->id);
            $user->userDefaultBankAccount($user->id);

            // Utility Configurations
            Utility::chartOfAccountTypeData($user->id);
            Utility::chartOfAccountData($user);
            Utility::chartOfAccountData1($user->id);
            Utility::pipeline_lead_deal_Stage($user->id);
            Utility::project_task_stages($user->id);
            Utility::labels($user->id);
            Utility::sources($user->id);
            Utility::jobStage($user->id);

            // Default Certificates
            GenerateOfferLetter::defaultOfferLetterRegister($user->id);
            ExperienceCertificate::defaultExpCertificatRegister($user->id);
            JoiningLetter::defaultJoiningLetterRegister($user->id);
            NOC::defaultNocCertificateRegister($user->id);

            // Assign Permission to Project Director
            $p_dir = User::where('type', 'Project Director')->first();
            $new_permission = new \App\Models\CompanyPermission();
            $new_permission->user_id = $p_dir->id;
            $new_permission->permitted_company_id = $user->id;
            $new_permission->active = 'false';
            $new_permission->created_by = \Auth::user()->id;
            $new_permission->save();

            // Send Email (If Enabled)
            $settings = Utility::settings();
            if ($settings['new_user'] == 1) {
                Utility::sendEmailTemplate('new_user', [$user->id => $user->email], [
                    'email' => $user->email,
                    'password' => $password,
                ]);
            }

            DB::commit();

            return response()->json([
                'status' => 'success',
                'id' => $user,
                'message' => __('User created successfully.')
            ], 201);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'status' => 'error',
                'message' => __('An error occurred while creating the user.'),
                'error' => $e->getMessage()
            ], 500);
        }
    }

    public function updateBrand(Request $request)
    {
        // Check permission
        if (!Auth::user()->can('edit user')) {
            return response()->json([
                'status' => 'error',
                'message' => __('Permission Denied')
            ], 403);
        }

        // Validate request
        $validator = Validator::make($request->all(), [
            'id' => 'required|integer|exists:users,id',
            'name' => 'required|string|max:120',
            'email' => 'required|email|unique:users,email,' . $request->id,
            'website_link' => 'required|url',
            'drive_link' => 'required|url',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            // Find user
            $user = User::findOrFail($request->id);

            // Update user details
            $user->update([
                'name' => $request->name,
                'email' => $request->email,
                'website_link' => $request->website_link,
                'drive_link' => $request->drive_link,
            ]);

            return response()->json([
                'status' => 'success',
                'id' => $user,
                'message' => __('User updated successfully.')
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => __('An error occurred while updating the user.'),
                'error' => $e->getMessage()
            ], 500);
        }
    }

    public function deleteBrand(Request $request)
    {
        // Check permission
        if (!Auth::user()->can('delete user')) {
            return response()->json([
                'status' => 'error',
                'message' => __('Permission Denied')
            ], 403);
        }

        // Validate request
        $validator = Validator::make($request->all(), [
            'id' => 'required|integer|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            // Find user
            $user = User::find($request->id);

            if (!$user) {
                return response()->json([
                    'status' => 'error',
                    'message' => __('User not found.')
                ], 404);
            }

            // Delete user
            $user->delete();

            return response()->json([
                'status' => 'success',
                'message' => __('User successfully deleted.')
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => __('An error occurred while deleting the user.'),
                'error' => $e->getMessage()
            ], 500);
        }
    }

    public function brandDetail(Request $request)
    {
        // Validate request
        $validator = Validator::make($request->all(), [
            'id' => 'required|integer|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            // Fetch user
            $user = User::with(['manager', 'director', 'created_by'])->findOrFail($request->id);


            return response()->json([
                'status' => 'success',
                'data' => $user
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => __('An error occurred while fetching user details.'),
                'error' => $e->getMessage()
            ], 500);
        }
    }

    public function employeeFileAttachments(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'employee_id' => 'required|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json(['status' => 'error', 'message' => $validator->errors()], 400);
        }

        $hrmFileAttachment = EmployeeDocument::where('employee_id', $request->employee_id)->first();

        if (!$hrmFileAttachment) {
            return response()->json([
                'status' => 'error',
                'message' => 'Document not found.'
            ], 404);
        }

        return response()->json([
            'status' => 'success',
            'baseurl' =>  asset('/EmployeeDocument'),
            'document' => $hrmFileAttachment
        ]);
    }


    public function UserEmployeeFileUpdate(Request $request)
    {
        if (!\Auth::user()->can('edit employee')) {
            return response()->json([
                'status' => 'error',
                'msg' => 'Permission Denied',
            ]);
        }

        // Debugging: Check if request contains files
        // dd($request->all(), $request->file());

        // Validation rules
        $validator = \Validator::make($request->all(), [
            'cv' => 'nullable|file|mimes:jpg,jpeg,png,pdf|max:4096', // Increased size limit to 4MB
            'id_card' => 'nullable|file|mimes:jpg,jpeg,png,pdf|max:4096',
            'academic_documents' => 'nullable|file|mimes:jpg,jpeg,png,pdf|max:4096',
            'profile_picture' => 'nullable|file|mimes:jpg,jpeg,png,pdf|max:4096',
            'id' => 'required|exists:users,id', // Ensure employee exists
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => 'validation error',

                'data' => $validator->errors(),
            ]);
        }

        // Define allowed file types
        $files = ['profile_picture', 'cv', 'academic_docs', 'id_card'];
        $uploadedFiles = [];

        foreach ($files as $fileType) {
            if ($request->hasFile($fileType)) {
                // Generate unique file name
                $filename = time() . '-' . uniqid() . '.' . $request->file($fileType)->extension();
                $request->file($fileType)->move(public_path('EmployeeDocument'), $filename);
                $uploadedFiles[$fileType] = $filename; // ✅ Correct assignment
            } else {
                $uploadedFiles[$fileType] = null;
            }
        }

        // Debugging output
        // dd($uploadedFiles);

        // Retrieve or create the EmployeeDocument record
        $employeeDocument = EmployeeDocument::firstOrNew(['employee_id' => $request->id]);



        if (!empty($uploadedFiles['profile_picture'])) {
            $employeeDocument->profile_picture = $uploadedFiles['profile_picture'];
        }

        if (!empty($uploadedFiles['academic_docs'])) {
            $employeeDocument->academic_documents = $uploadedFiles['academic_docs'];
        }

        if (!empty($uploadedFiles['id_card'])) {
            $employeeDocument->id_card = $uploadedFiles['id_card'];
        }

        if (!empty($uploadedFiles['cv'])) {
            $employeeDocument->resume = $uploadedFiles['cv'];
        }
        $employeeDocument->created_by = \Auth::id();
        $employeeDocument->save();

        return response()->json([
            'status' => 'success',
            'message' => 'Employee updated successfully',
            'data' => $employeeDocument,
        ]);
    }

    // Emergency Contact API Endpoints
    public function EmergencyContactPost(Request $request)
    {
        $request->validate([
            'id' => 'required|integer|exists:users,id',
            'emerg_name' => 'required|string|max:255',
            'emerg_phone' => 'required|string|max:20',
        ]);

        $EmergencyContact = new EmergencyContact();
        $EmergencyContact->user_id = $request->id;
        $EmergencyContact->emerg_name = $request->emerg_name;
        $EmergencyContact->emerg_phone = $request->emerg_phone;
        $EmergencyContact->save();


        $user = User::find($EmergencyContact->user_id);
        addLogActivity([
            'type' => 'success',
            'note' => json_encode([
                'title' => $user->name. ' emergency contact created',
                'message' => $user->name. ' emergency contact created'
            ]),
            'module_id' => $EmergencyContact->user_id,
            'module_type' => 'employee',
            'notification_type' => 'Emergency Contact Created',
        ]);

          addLogActivity([
            'type' => 'success',
            'note' => json_encode([
                'title' => $user->name. ' emergency contact created',
                'message' => $user->name. ' emergency contact created'
            ]),
            'module_id' => $EmergencyContact->user_id,
            'module_type' => 'employeeprofile',
            'notification_type' => 'Emergency Contact Created',
        ]);

        return response()->json([
            'status' => 'success',
            'data' => $EmergencyContact,
            'message' => __('Emergency Contact added successfully!'),
        ], 201);
    }

    public function EmergencyContactUpdate(Request $request)
    {

       
        $validator = Validator::make($request->all(), [
                'id' => 'required|integer|exists:emergency_contacts,id',
                'emerg_name' => 'required|string|max:255',
                'emerg_phone' => 'required|string|max:20',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => false,
                    'message' => $validator->errors(),
                ], 422);
            }
          
        $EmergencyContact = EmergencyContact::find($request->id);
         
        if (!$EmergencyContact) {
            return response()->json([
                'status' => 'error',
                'message' => __('Emergency Contact not found!'),
            ], 404);
        }
        $originalData = $EmergencyContact->toArray();
        $EmergencyContact->emerg_name = $request->emerg_name;
        $EmergencyContact->emerg_phone = $request->emerg_phone;
        $EmergencyContact->save();

          // Log changed fields only
        $changes = [];
         $updatedFields = [];
        foreach ($originalData as $field => $oldValue) {
             if (in_array($field, ['created_at', 'updated_at'])) {
                    continue;
                }
            if ($EmergencyContact->$field != $oldValue) {
                $changes[$field] = [
                    'old' => $oldValue,
                    'new' => $EmergencyContact->$field
                ];
                $updatedFields[] = $field;
            }
        }
        $user = User::find($EmergencyContact->user_id);
           
        if (!empty($changes)) {
                addLogActivity([
                    'type' => 'info',
                    'note' => json_encode([
                        'title' => $user->name . ' emergency contact updated ',
                        'message' => 'Fields updated: ' . implode(', ', $updatedFields),
                        'changes' => $changes
                    ]),
                    'module_id' => $EmergencyContact->user_id,
                    'module_type' => 'employee',
                    'notification_type' => 'Emergency Contact Updated'
                ]);
            }

             
        if (!empty($changes)) {
                addLogActivity([
                    'type' => 'info',
                    'note' => json_encode([
                        'title' => $user->name . ' emergency contact updated ',
                        'message' => 'Fields updated: ' . implode(', ', $updatedFields),
                        'changes' => $changes
                    ]),
                    'module_id' => $EmergencyContact->user_id,
                    'module_type' => 'employeeprofile',
                    'notification_type' => 'Emergency Contact Updated'
                ]);
            }

        return response()->json([
            'status' => 'success',
            'data' => $EmergencyContact,
            'message' => __('Emergency Contact updated successfully!'),
        ]);
    }

    public function EmergencyContactDelete(Request $request)
    {
        $validator = Validator::make($request->all(), [
                'id' => 'required|integer|exists:emergency_contacts,id'
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => false,
                    'message' => $validator->errors(),
                ], 422);
            }
          

        $EmergencyContact = EmergencyContact::find($request->id);
        if (!$EmergencyContact) {
            return response()->json([
                'status' => 'error',
                'message' => __('Emergency Contact not found!'),
            ], 404);
        }
         $user = User::find($EmergencyContact->user_id);
        $EmergencyContact->delete();

         
           
        
                addLogActivity([
                    'type' => 'warning',
                    'note' => json_encode([
                        'title' => $user->name . ' emergency contact deleted ',
                        'message' => $user->name . ' emergency contact deleted ' 
                    ]),
                    'module_id' => $user->id,
                    'module_type' => 'employee',
                    'notification_type' => 'Emergency Contact deleted'
                ]);
            

                
                addLogActivity([
                    'type' => 'warning',
                    'note' => json_encode([
                        'title' => $user->name . ' emergency contact deleted ',
                        'message' => $user->name . ' emergency contact deleted ' 
                    ]),
                    'module_id' => $user->id,
                    'module_type' => 'employeeprofile',
                    'notification_type' => 'Emergency Contact deleted'
                ]);
            

        return response()->json([
            'status' => 'success',
            'message' => __('Emergency Contact deleted successfully!'),
        ]);
    }

    // Additional Address API Endpoints
    public function AdditionalAddressPost(Request $request)
    {
        $request->validate([
            'id' => 'required|integer',
            'address' => 'required|string|max:500',
        ]);

        $AdditionalAddress = new AdditionalAddress();
        $AdditionalAddress->user_id = $request->id;
        $AdditionalAddress->address = $request->address;
        $AdditionalAddress->save();

       // ========== add ============
        $user = User::find($AdditionalAddress->user_id);
        addLogActivity([
            'type' => 'success',
            'note' => json_encode([
                'title' => $user->name. ' additional address created',
                'message' => $user->name. ' additional address created'
            ]),
            'module_id' => $AdditionalAddress->user_id,
            'module_type' => 'employee',
            'notification_type' => 'additional address Created',
        ]);

          addLogActivity([
            'type' => 'success',
            'note' => json_encode([
                'title' => $user->name. ' additional address created',
                'message' => $user->name. ' additional address created'
            ]),
            'module_id' => $AdditionalAddress->user_id,
            'module_type' => 'employeeprofile',
            'notification_type' => 'additional address Created',
        ]);


        return response()->json([
            'status' => 'success',
            'data' => $AdditionalAddress,
            'message' => __('Additional Address added successfully!'),
        ], 201);
    }

    public function AdditionalAddressUpdate(Request $request)
    {
        $request->validate([
            'id' => 'required|integer',
            'address' => 'required|string|max:500',
        ]);

        $AdditionalAddress = AdditionalAddress::find($request->id);
        if (!$AdditionalAddress) {
            return response()->json([
                'status' => 'error',
                'message' => __('Additional Address not found!'),
            ], 404);
        }
        $originalData = $AdditionalAddress->toArray();
        $AdditionalAddress->address = $request->address;
        $AdditionalAddress->save();

      //  ============ edit ============


         


           // Log changed fields only
        $changes = [];
         $updatedFields = [];
        foreach ($originalData as $field => $oldValue) {
             if (in_array($field, ['created_at', 'updated_at'])) {
                    continue;
                }
            if ($AdditionalAddress->$field != $oldValue) {
                $changes[$field] = [
                    'old' => $oldValue,
                    'new' => $AdditionalAddress->$field
                ];
                $updatedFields[] = $field;
            }
        }
        $user = User::find($AdditionalAddress->user_id);
           
        if (!empty($changes)) {
                addLogActivity([
                    'type' => 'info',
                    'note' => json_encode([
                        'title' => $user->name . ' additional address updated ',
                        'message' => 'Fields updated: ' . implode(', ', $updatedFields),
                        'changes' => $changes
                    ]),
                    'module_id' => $AdditionalAddress->user_id,
                    'module_type' => 'employee',
                    'notification_type' => 'additional address Updated'
                ]);
            }

             
        if (!empty($changes)) {
                addLogActivity([
                    'type' => 'info',
                    'note' => json_encode([
                        'title' => $user->name . ' additional address updated ',
                        'message' => 'Fields updated: ' . implode(', ', $updatedFields),
                        'changes' => $changes
                    ]),
                    'module_id' => $AdditionalAddress->user_id,
                    'module_type' => 'employeeprofile',
                    'notification_type' => 'additional address Updated'
                ]);
            }

        return response()->json([
            'status' => 'success',
            'message' => __('Additional Address updated successfully!'),
        ]);
    }

    public function AdditionalAddressDelete(Request $request)
    {
        $request->validate(['id' => 'required|integer']);

        $AdditionalAddress = AdditionalAddress::find($request->id);
        if (!$AdditionalAddress) {
            return response()->json([
                'status' => 'error',
                'message' => __('Additional Address not found!'),
            ], 404);
        }

        $AdditionalAddress->delete();

         //    =================== delete ===========

            $user = User::find($AdditionalAddress->user_id); 
                addLogActivity([
                    'type' => 'warning',
                    'note' => json_encode([
                        'title' => $user->name . ' additional address deleted ',
                        'message' => $user->name . ' additional address deleted ' 
                    ]),
                    'module_id' => $user->id,
                    'module_type' => 'employee',
                    'notification_type' => 'additional address deleted'
                ]);
            

                
                addLogActivity([
                    'type' => 'warning',
                    'note' => json_encode([
                        'title' => $user->name . ' additional address deleted ',
                        'message' => $user->name . ' additional address deleted ' 
                    ]),
                    'module_id' => $user->id,
                    'module_type' => 'employeeprofile',
                    'notification_type' => 'additional address deleted'
                ]);
            

        return response()->json([
            'status' => 'success',
            'message' => __('Additional Address deleted successfully!'),
        ]);
    }

    public function getAdditionalAddresses(Request $request, $userId)
    {
        $addresses = AdditionalAddress::where('user_id', $userId)->get();

        if (!$addresses) {
            return response()->json([
                'status' => 'error',
                'message' => __('Addresses not found.')
            ], 404);
        }

        return response()->json([
            'status' => 'success',
            'data' => $addresses
        ], 200);
    }

    public function createEmployee(Request $request)
    {
        if (!\Auth::user()->can('create employee')) {
            return response()->json([
                'status' => false,
                'message' => 'Permission denied.',
            ], 403);
        }

        $validator = \Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'dob' => 'required|date',
            'phone' => 'required|string|max:20',
            'address' => 'required|string',
            'email' => 'required|email|unique:users,email',
            'password' => 'required|string|min:8',
            'role' => 'required|exists:roles,id',  // Updated validation to check role ID
            'branch_id' => 'required|exists:branches,id',
            'region_id' => 'required|exists:regions,id',
            'brand_id' => 'required|exists:users,id',
            'company_doj' => 'required|date',
            'gender' => 'nullable|string',
            'account_holder_name' => 'nullable|string',
            'account_number' => 'nullable|string',
            'Salary' => 'required|numeric|min:0|max:1000000',
            'bank_name' => 'nullable|string',
            'bank_identifier_code' => 'nullable|string',
            'branch_location' => 'nullable|string',
            'tax_payer_id' => 'nullable|string',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => false,
                'message' => $validator->errors()->first(),
            ], 400);
        }

        \DB::beginTransaction();
        try {
            $password = Hash::make($request->password);
            $role = Role::find($request->role);
            // Create User
            $user = new User();
            $user->name = $request->name;
            $user->email = $request->email;
            $user->password = $password;
            $user->passport_number = $request->Passport;
            $user->type = $role->name ?? 'Client'; // Storing role ID
            $user->branch_id = $request->branch_id;
            $user->region_id = $request->region_id;
            $user->brand_id = $request->brand_id;
            $user->default_pipeline = 1;
            $user->plan = Plan::first()->id;
            $user->lang = 'en';
            $user->created_by = \Auth::user()->id;
            $user->date_of_birth = $request->dob;
            $user->phone = $request->phone;
            $user->Postal = $request->Postal;
            $user->NationalID = $request->NationalID;
            $user->Province = $request->Province;
            $user->City = $request->City;
            $user->country_id = $request->country;
            $user->save();

            // Assign Role using Role ID

            $user->assignRole($role);

            // Assign Project/Region/Branch Manager based on Role ID
            switch ($role->name) {
                case 'Project Director':
                    User::where('id', $request->brand_id)->update(['project_director_id' => $user->id]);
                    break;
                case 'Project Manager':
                    User::where('id', $request->brand_id)->update(['project_manager_id' => $user->id]);
                    break;
                case 'Region Manager':
                    Region::where('id', $request->region_id)->update(['region_manager_id' => $user->id]);
                    break;
                case 'Branch Manager':
                    Branch::where('id', $request->branch_id)->update(['branch_manager_id' => $user->id]);
                    break;
            }

            // Create Employee
            $employee = new Employee();
            $employee->user_id = $user->id;
            $employee->name = $request->name;
            $employee->dob = $request->dob;
            $employee->gender = $request->gender;
            $employee->phone = $request->phone;
            $employee->address = $request->address;
            $employee->email = $request->email;
            $employee->password = $password;
            $employee->employee_id = $this->employeeNumber();
            $employee->branch_id = $request->branch_id;
            $employee->company_doj = $request->company_doj;
            $employee->documents = $request->document ? implode(',', array_keys($request->document)) : null;
            $employee->account_holder_name = $request->account_holder_name;
            $employee->account_number = $request->account_number;
            $employee->bank_name = $request->bank_name;
            $employee->bank_identifier_code = $request->bank_identifier_code;
            $employee->branch_location = $request->branch_location;
            $employee->tax_payer_id = $request->tax_payer_id;
            $employee->salary=$request->Salary;
            $employee->created_by = \Auth::user()->id;
            $employee->save();

            // Log Activity
            addLogActivity([
                'type' => 'success',
                'note' => json_encode([
                        'title' => $user->name. '  created',
                        'message' => $user->name. '  created'
                    ]),
                'module_id' => $user->id,
                'module_type' => 'employee',
                'notification_type' => 'Employee Created',
            ]);

              addLogActivity([
                'type' => 'success',
                'note' => json_encode([
                        'title' => $user->name. '  created',
                        'message' => $user->name. '  created'
                    ]),
                'module_id' => $user->id,
                'module_type' => 'employeeprofile',
                'notification_type' => 'Employee Created',
            ]);

            \DB::commit();
            return response()->json([
                'status' => true,
                'message' => 'Employee successfully created.',
                'data' => [
                    'user' => $user,
                    'employee' => $employee,
                ],
            ]);
        } catch (\Exception $e) {
            \DB::rollBack();
            return response()->json([
                'status' => false,
                'message' => 'Something went wrong: ' . $e->getMessage(),
            ], 500);
        }
    }


    public function UpdateEmployee(Request $request)
    {
        if (!\Auth::user()->can('create employee')) {
            return response()->json([
                'status' => false,
                'message' => 'Permission denied.',
            ], 403);
        }

        $validator = \Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'dob' => 'required|date',
            'emp_id' => 'required|exists:users,id',
            'phone' => 'required|string|max:20',
            'address' => 'required|string',
            'email' => 'required|email|unique:users,email,' . $request->emp_id, 
            'role' => 'required',  // Updated validation to check role ID
            'branch_id' => 'required|exists:branches,id',
            'region_id' => 'required|exists:regions,id',
            'brand_id' => 'required|exists:users,id',
            'company_doj' => 'required|date',
            'gender' => 'nullable|string',
            'account_holder_name' => 'nullable|string',
            'account_number' => 'nullable|string',
            'Salary' => 'required|numeric|min:0|max:1000000',
            'bank_name' => 'nullable|string',
            'bank_identifier_code' => 'nullable|string',
            'branch_location' => 'nullable|string',
            'tax_payer_id' => 'nullable|string',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => false,
                'message' => $validator->errors()->first(),
            ], 400);
        }

        \DB::beginTransaction();
        try {
            $password = Hash::make($request->password);
            $role = Role::find($request->role);
            // Create User
            $user = User::find($request->emp_id) ?? new User();

             $originalUserData = $user->exists ? $user->toArray() : [];
            $user->name = $request->name;
            $user->email = $request->email;
          //  $user->password = $password;
            $user->passport_number = $request->Passport;
            $user->type = $request->role; // Storing role ID
            $user->branch_id = $request->branch_id;
            $user->region_id = $request->region_id;
            $user->brand_id = $request->brand_id;
            $user->default_pipeline = 1;
            $user->plan = Plan::first()->id;
            $user->lang = 'en';
            $user->created_by = \Auth::user()->id;
            $user->date_of_birth = $request->dob;
            $user->phone = $request->phone;
            $user->Postal = $request->Postal;
            $user->NationalID = $request->NationalID;
            $user->Province = $request->Province;
            $user->City = $request->City;
            $user->country_id = $request->country;
            $user->save();

            // Assign Role using Role ID

            $user->assignRole($request->role);

            // Assign Project/Region/Branch Manager based on Role ID
            switch ($request->role) {
                case 'Project Director':
                    User::where('id', $request->brand_id)->update(['project_director_id' => $user->id]);
                    break;
                case 'Project Manager':
                    User::where('id', $request->brand_id)->update(['project_manager_id' => $user->id]);
                    break;
                case 'Region Manager':
                    Region::where('id', $request->region_id)->update(['region_manager_id' => $user->id]);
                    break;
                case 'Branch Manager':
                    Branch::where('id', $request->branch_id)->update(['branch_manager_id' => $user->id]);
                    break;
            }

            // Create Employee
            $employee = Employee::where('user_id',$user->id)->first() ?? new Employee();
            $originalEmployeeData = $employee->exists ? $employee->toArray() : [];
            $employee->user_id = $user->id;
            $employee->name = $request->name;
            $employee->dob = $request->dob;
            $employee->gender = $request->gender;
            $employee->phone = $request->phone;
            $employee->address = $request->address;
            $employee->email = $request->email;
            $employee->password = $password;
            $employee->employee_id = $this->employeeNumber();
            $employee->branch_id = $request->branch_id;
            $employee->company_doj = $request->company_doj;
            $employee->documents = $request->document ? implode(',', array_keys($request->document)) : null;
            $employee->account_holder_name = $request->account_holder_name;
            $employee->account_number = $request->account_number;
            $employee->bank_name = $request->bank_name;
            $employee->bank_identifier_code = $request->bank_identifier_code;
            $employee->branch_location = $request->branch_location;
            $employee->tax_payer_id = $request->tax_payer_id;
            $employee->salary=$request->Salary;
            $employee->created_by = \Auth::user()->id;
            $employee->save();


            $userChanges = [];
            $employeeChanges = [];
            $updatedFields = [];

             // Check user changes
                foreach ($originalUserData as $field => $oldValue) {
                    if (in_array($field, ['created_at', 'updated_at', 'password'])) {
                        continue;
                    }
                    if ($user->$field != $oldValue) {
                        $userChanges[$field] = [
                            'old' => $oldValue,
                            'new' => $user->$field
                        ];
                        $updatedFields[] = 'user.'.$field;
                    }
                }

                // Check employee changes
                foreach ($originalEmployeeData as $field => $oldValue) {
                    if (in_array($field, ['created_at', 'updated_at', 'password'])) {
                        continue;
                    }
                    if ($employee->$field != $oldValue) {
                        $employeeChanges[$field] = [
                            'old' => $oldValue,
                            'new' => $employee->$field
                        ];
                        $updatedFields[] = 'employee.'.$field;
                    }
                }
            // Log Activity
            // Log activity with detailed changes

          //  dd($userChanges, $employeeChanges, $updatedFields);
            if (!empty($userChanges) || !empty($employeeChanges)) {
                addLogActivity([
                    'type' => 'info',
                    'note' => json_encode([
                        'title' => $user->name. ' updated ' ,
                        'message' => 'Fields updated: ' . implode(', ', $updatedFields),
                        'changes' => [
                            'user' => $userChanges,
                            'employee' => $employeeChanges
                        ]
                    ]),
                    'module_id' => $user->id,
                    'module_type' => 'employee',
                    'notification_type' => 'Employee Updated',
                ]);
            }
             if (!empty($userChanges) || !empty($employeeChanges)) {
                addLogActivity([
                    'type' => 'info',
                    'note' => json_encode([
                        'title' => $user->name. ' updated ' ,
                        'message' => 'Fields updated: ' . implode(', ', $updatedFields),
                        'changes' => [
                            'user' => $userChanges,
                            'employee' => $employeeChanges
                        ]
                    ]),
                    'module_id' => $user->id,
                    'module_type' => 'employeeprofile',
                    'notification_type' => 'Employee Updated',
                ]);
            }

            \DB::commit();
            return response()->json([
                'status' => true,
                'message' => 'Employee successfully Updated.',
                'data' => [
                    'user' => $user,
                    'employee' => $employee,
                ],
            ]);
        } catch (\Exception $e) {
            \DB::rollBack();
            return response()->json([
                'status' => false,
                'message' => 'Something went wrong: ' . $e->getMessage(),
            ], 500);
        }
    }

    function employeeNumber()
    {
        $latest = Employee::where('created_by', '=', \Auth::user()->creatorId())->latest()->first();
        if (!$latest) {
            return 1;
        }

        return $latest->employee_id + 1;
    }

    public function AttendanceSetting(Request $request)
    {
        // Check if the user has permission to edit employees
        if (!\Auth::user()->can('edit employee')) {
            return response()->json([
                'status' => 'error',
                'msg' => 'Permission Denied',
            ], 403);
        }

        // Validate the incoming request data
        $validator = \Validator::make(
            $request->all(),
            [
                'id' => 'required|exists:users,id', // Ensure user ID exists
                'isloginrestrickted' => 'required|boolean',
                'isloginanywhere' => 'required|boolean',
                'longitude' => 'nullable|numeric',
                'latitude' => 'nullable|numeric',
            ]
        );

        // Handle validation errors
        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'msg' => $validator->errors()->first(),
            ], 400);
        }

        try {
            // Find the user by ID
            $user = User::findOrFail($request->id);

            // Update user settings
            $user->isloginrestrickted = $request->isloginrestrickted;
            $user->isloginanywhere = $request->isloginanywhere;
            $user->longitude = $request->longitude;
            $user->latitude = $request->latitude;

            // Save the changes
            $user->save();

            return response()->json([
                'status' => 'success',
                'msg' => 'Attendance Setting updated successfully',
            ], 200);
        } catch (\Exception $e) {
            // Handle unexpected errors
            return response()->json([
                'status' => 'error',
                'msg' => 'Something went wrong: ' . $e->getMessage(),
            ], 500);
        }
    }

    public function TargetSetting(Request $request)
    {
        // Check if the user has permission to edit employees
        if (!\Auth::user()->can('edit employee')) {
            return response()->json([
                'status' => 'error',
                'msg' => 'Permission Denied',
            ], 403);
        }

        // Validate the incoming request data
        $validator = \Validator::make(
            $request->all(),
            [
                'id' => 'required|exists:users,id', // Ensure the user ID exists
                'admission' => 'required|string|max:255',
                'application' => 'required|string|max:255',
                'deposit' => 'required|string|max:255',
                'visa' => 'required|string|max:255',
            ]
        );

        // Handle validation errors
        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'msg' => $validator->errors()->first(),
            ], 400);
        }

        try {
            // Find the user by ID
            $user = User::findOrFail($request->id);

            // Update user information
            $user->admission = $request->admission;
            $user->application = $request->application;
            $user->deposit = $request->deposit;
            $user->visa = $request->visa;

            // Save the changes
            $user->save();

            return response()->json([
                'status' => 'success',
                'msg' => 'Target Setting updated successfully',
            ], 200);
        } catch (\Exception $e) {
            // Handle unexpected errors
            return response()->json([
                'status' => 'error',
                'msg' => 'Something went wrong: ' . $e->getMessage(),
            ], 500);
        }
    }
    

  public function storeOrUpdateMetas(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'user_id' => 'required|integer|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => $validator->errors()
            ], 422);
        }

        $universityId = $request->user_id;
        $user = Auth::user();
        $metaData = $request->except('user_id');
        $changes = [];

        foreach ($metaData as $key => $newValue) {
            $existingMeta = EmployeeMeta::where([
                'user_id' => $universityId,
                'meta_key' => $key
            ])->first();

            if ($existingMeta) {
                // Check for changes
                if ($existingMeta->meta_value != $newValue) {
                    $changes[$key] = [
                        'old' => $existingMeta->meta_value,
                        'new' => $newValue
                    ];
                }
            } else {
                $changes[$key] = [
                    'old' => null,
                    'new' => $newValue
                ];
            }

            // Store/update the meta
            EmployeeMeta::updateOrCreate(
                [
                    'user_id' => $universityId,
                    'meta_key' => $key,
                ],
                [
                    'meta_value' => $newValue,
                    'created_by' => $user->id,
                ]
            );
        }

        // Log only if there are changes
        if (!empty($changes)) {
            $universityName = User::where('id', $universityId)->value('name');
            $fieldList = implode(', ', array_map('ucwords', array_keys($changes)));

            $logDetails = [
                'title' => "{$universityName} updated",
                'message' => "Fields updated: {$fieldList}",
                'changes' => $changes
            ];

            addLogActivity([
                'type' => 'info',
                'note' => json_encode($logDetails),
                'module_id' => $universityId,
                'module_type' => 'Employee',
                'created_by' => $user->id,
                'notification_type' => 'Employee Metadata Updated'
            ]);
        }

        $metadata = EmployeeMeta::where('user_id', $universityId)->get();

        $metas = new \stdClass();
        foreach ($metadata as $data) {
            $key = $data->meta_key;
            $value = $data->meta_value;

            $decodedValue = json_decode($value);
            $metas->$key = json_last_error() === JSON_ERROR_NONE ? $decodedValue : $value;
        }

        return response()->json([
            'status' => true,
            'message' => 'Employee processed successfully',
            'data' => $metas
        ]);
    }


    protected function logMetaChanges($universityId, $changes, $userId)
    {
        $logDetails = [
            'title' => 'Employee Metadata Updated',
            'message' => 'Metadata fields were modified',
            'changes' => $changes
        ];

        addLogActivity([
            'type' => 'info',
            'note' => json_encode($logDetails),
            'module_id' => $universityId,
            'module_type' => 'Employee',
            'created_by' => $userId,
            'notification_type' => 'Employee Metadata Updated'
        ]);
    }

    public function getEmployeeMeta(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'user_id' => 'required|integer|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => $validator->errors()
            ], 422);
        }
        $metadata = EmployeeMeta::where('user_id', $request->user_id)
            ->get();

        $metas = new \stdClass(); // Create empty object

        foreach ($metadata as $data) {
            $key = $data->meta_key;
            $value = $data->meta_value;

            // Handle JSON values if stored as JSON strings
            $decodedValue = json_decode($value);
            $metas->$key = json_last_error() === JSON_ERROR_NONE ? $decodedValue : $value;
        }

        return response()->json([
            'status' => true,
            'message' => 'Employee meta list retrieved successfully.',
            'data' => $metas // Returns as object
        ]);
    }
    public function TerminateEmployee(Request $request)
    {
        // Check if the user has permission to edit employees
        if (!\Auth::user()->can('edit employee')) {
            return response()->json([
                'status' => 'error',
                'msg' => 'Permission Denied',
            ], 403);
        }
 

        // Validate the incoming request data
        $validator = \Validator::make(
            $request->all(),
            [
                'id' => 'required|exists:users,id', // Ensure the user ID exists
                'is_active' => 'required|in:0,1,2,3',  // Validate that is_status is either 1 or 0
            ]
        );

        // Handle validation errors
        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'msg' => $validator->errors()->first(),
            ], 400);
        }

        try {
            $user = User::findOrFail($request->id);
            $user->is_active = $request->is_active;
            $user->save();

             // Log activity
            $statusMap = [
                0 => 'Inactive',
                1 => 'Active',
                2 => 'Terminated',
                3 => 'Suspended',
            ];

            $statusText = $statusMap[$request->is_active] ?? 'Unknown';

                // $logData = [
                //     'type' => 'info',
                //     'note' => json_encode([
                //         'title' => $user->name . ' status updated to ' . $statusText,
                //         'message' => $user->name . ' status updated to ' . $statusText,
                //     ]),
                //     'module_id' => $user->id,
                //     'module_type' => 'employee',
                //     'notification_type' => 'employee Updated'
                // ];
                // addLogActivity($logData);
                $logData = [
                    'type' => 'info',
                    'note' => json_encode([
                        'title' => $user->name . ' status updated to ' . $statusText,
                        'message' => $user->name . ' status updated to ' . $statusText,
                    ]),
                    'module_id' => $user->id,
                    'module_type' => 'employeeprofile',
                    'notification_type' => 'employee Updated'
                ];
                addLogActivity($logData);
            return response()->json([
                'status' => 'success',
                'msg' => $statusText.'  Employee successfully',
            ], 200);
        } catch (\Exception $e) {
            // Handle unexpected errors
            return response()->json([
                'status' => 'error',
                'msg' => 'Something went wrong: ' . $e->getMessage(),
            ], 500);
        }
    }
}
